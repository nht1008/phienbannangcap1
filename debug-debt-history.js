// Test script ƒë·ªÉ console.log('‚úÖ Debt creation logged');
console.log('üîç Expected display: Hƒê: ' + testInvoiceId); // Hi·ªÉn th·ªã to√†n b·ªô IDbug v·∫•n ƒë·ªÅ l·ªãch s·ª≠ c√¥ng n·ª£
// Ch·∫°y trong console c·ªßa tr√¨nh duy·ªát

console.log('üîß DEBUG: Testing debt history issues...');

// Test 1: Ki·ªÉm tra debt creation v·ªõi invoice ID th·ª±c t·∫ø
const testInvoiceId = 'invoice-' + Date.now(); // T·∫°o ID th·ª±c t·∫ø thay v√¨ #JPUUK7
console.log('üìã Test Invoice ID:', testInvoiceId);

logDebtCreation(
  'test-customer-debug',
  'Kh√°ch h√†ng Debug Test', 
  500000, 
  'emp-test-123', 
  'Nh√¢n vi√™n Debug',
  testInvoiceId,
  'Ti·ªÅn m·∫∑t'
).then(() => {
  console.log('‚úÖ Debt creation logged');
  console.log('üîç Expected display: #' + testInvoiceId.slice(-6).toUpperCase());
})
.catch(err => console.error('‚ùå Error in debt creation:', err));

// Test 2: Ki·ªÉm tra debt payment
setTimeout(() => {
  logDebtPayment(
    'test-customer-debug',
    'Kh√°ch h√†ng Debug Test',
    200000,
    300000, // C√≤n l·∫°i 300k
    'emp-test-123',
    'Nh√¢n vi√™n Debug',
    'Thanh to√°n test t·ª´ console',
    'debt-test-123'
  ).then(() => {
    console.log('‚úÖ Debt payment logged');
    console.log('üîç Check if this appears in debt history dialog');
  })
  .catch(err => console.error('‚ùå Error in debt payment:', err));
}, 2000);

// Test 3: Query debt history ƒë·ªÉ xem d·ªØ li·ªáu
setTimeout(() => {
  console.log('üîç Querying debt history for customer: test-customer-debug');
  
  // M√¥ ph·ªèng query t∆∞∆°ng t·ª± nh∆∞ trong CustomerDebtHistoryDialog
  const { ref, query, orderByChild, equalTo, onValue } = window;
  if (ref && query && orderByChild && equalTo && onValue) {
    const historyQuery = query(
      ref(db, 'debtHistory'),
      orderByChild('customerId'),
      equalTo('test-customer-debug')
    );
    
    onValue(historyQuery, (snapshot) => {
      const data = snapshot.val();
      console.log('üìä Raw debt history data:', data);
      
      if (data) {
        const historyArray = Object.keys(data).map(key => ({ id: key, ...data[key] }));
        console.log('üìã Processed history array:', historyArray);
        
        // Ki·ªÉm tra t·ª´ng entry
        historyArray.forEach((entry, index) => {
          console.log(`üìù Entry ${index + 1}:`, {
            action: entry.action,
            amount: entry.amount,
            remainingDebt: entry.remainingDebt,
            notes: entry.notes,
            invoiceId: entry.invoiceId,
            date: entry.date
          });
        });
      } else {
        console.log('‚ö†Ô∏è No debt history found for this customer');
      }
    });
  } else {
    console.log('‚ùå Firebase functions not available in this context');
  }
}, 4000);

// H∆∞·ªõng d·∫´n ki·ªÉm tra
console.log(`
üß™ H∆Ø·ªöNG D·∫™N KI·ªÇM TRA:

1. Ch·∫°y script n√†y
2. M·ªü dialog "L·ªãch s·ª≠ c√¥ng n·ª£" cho kh√°ch h√†ng "Kh√°ch h√†ng Debug Test"
3. Ki·ªÉm tra:
   - C√≥ hi·ªÉn th·ªã c·∫£ "T·∫°o n·ª£" v√† "Thanh to√°n" kh√¥ng?
   - M√£ h√≥a ƒë∆°n c√≥ hi·ªÉn th·ªã ƒë√∫ng format #XXXXXX kh√¥ng?
   - S·ªë ti·ªÅn c√≤n l·∫°i c√≥ ch√≠nh x√°c kh√¥ng?

4. N·∫øu kh√¥ng th·∫•y d·ªØ li·ªáu:
   - Ki·ªÉm tra console xem c√≥ log "üî• LOGGING DEBT PAYMENT" kh√¥ng
   - Ki·ªÉm tra Firebase Database trong tab "debtHistory"
   - Xem log debug t·ª´ CustomerDebtHistoryDialog
`);
