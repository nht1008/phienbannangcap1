import { ref, get, update } from 'firebase/database';
import { db } from '@/lib/firebase';
import type { Product } from '@/types';

/**
 * ƒê√°nh s·ªë l·∫°i l√¥ h√†ng cho t·∫•t c·∫£ s·∫£n ph·∫©m
 * Quy t·∫Øc: L√¥ c≈© nh·∫•t = 1, l√¥ m·ªõi nh·∫•t = s·ªë cao nh·∫•t
 * X√≥a nh·ªØng l√¥ h·∫øt h√†ng (quantity = 0)
 */
export async function reorderBatchNumbers(): Promise<void> {
  try {
    console.log('üîÑ B·∫Øt ƒë·∫ßu ƒë√°nh s·ªë l·∫°i l√¥ h√†ng...');
    
    // L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m t·ª´ Firebase
    const inventorySnapshot = await get(ref(db, 'inventory'));
    if (!inventorySnapshot.exists()) {
      console.log('üì¶ Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong kho');
      return;
    }

    const allProducts: Record<string, Product> = inventorySnapshot.val();
    const productsArray = Object.entries(allProducts).map(([id, product]) => ({
      ...product,
      id
    }));

    console.log(`üì¶ T√¨m th·∫•y ${productsArray.length} s·∫£n ph·∫©m`);

    // Nh√≥m s·∫£n ph·∫©m theo c√°c thu·ªôc t√≠nh (name + color + quality + size + unit)
    const productGroups = new Map<string, Product[]>();
    
    productsArray.forEach(product => {
      // T·∫°o key nh√≥m t·ª´ c√°c thu·ªôc t√≠nh
      const groupKey = [
        product.name,
        product.color || '',
        product.quality || '', 
        product.size || '',
        product.unit || ''
      ].join('|').toLowerCase();

      if (!productGroups.has(groupKey)) {
        productGroups.set(groupKey, []);
      }
      productGroups.get(groupKey)!.push(product);
    });

    console.log(`üìä T√¨m th·∫•y ${productGroups.size} nh√≥m s·∫£n ph·∫©m`);

    const updates: { [key: string]: any } = {};
    let totalReordered = 0;
    let totalDeleted = 0;

    // X·ª≠ l√Ω t·ª´ng nh√≥m s·∫£n ph·∫©m
    for (const [groupKey, products] of productGroups) {
      // L·ªçc b·ªè s·∫£n ph·∫©m h·∫øt h√†ng
      const inStockProducts = products.filter(p => p.quantity > 0);
      const outOfStockProducts = products.filter(p => p.quantity <= 0);

      // X√≥a s·∫£n ph·∫©m h·∫øt h√†ng
      outOfStockProducts.forEach(product => {
        updates[`inventory/${product.id}`] = null; // X√≥a kh·ªèi Firebase
        totalDeleted++;
        console.log(`üóëÔ∏è  X√≥a s·∫£n ph·∫©m h·∫øt h√†ng: ${product.name} (L√¥ ${product.batchNumber || 'N/A'})`);
      });

      if (inStockProducts.length === 0) {
        console.log(`üì§ Nh√≥m "${groupKey}" kh√¥ng c√≤n s·∫£n ph·∫©m n√†o trong kho`);
        continue;
      }

      // S·∫Øp x·∫øp s·∫£n ph·∫©m c√≤n h√†ng theo batchNumber c≈© (th·ª© t·ª± nh·∫≠p kho)
      inStockProducts.sort((a, b) => (a.batchNumber || 1) - (b.batchNumber || 1));

      // ƒê√°nh s·ªë l·∫°i t·ª´ 1
      inStockProducts.forEach((product, index) => {
        const newBatchNumber = index + 1;
        const oldBatchNumber = product.batchNumber || 1;
        
        if (oldBatchNumber !== newBatchNumber) {
          updates[`inventory/${product.id}/batchNumber`] = newBatchNumber;
          totalReordered++;
          console.log(`üî¢ ${product.name}: L√¥ ${oldBatchNumber} ‚Üí L√¥ ${newBatchNumber}`);
        }
      });

      console.log(`‚úÖ Nh√≥m "${inStockProducts[0].name}": ${inStockProducts.length} l√¥ ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp`);
    }

    // C·∫≠p nh·∫≠t Firebase n·∫øu c√≥ thay ƒë·ªïi
    if (Object.keys(updates).length > 0) {
      await update(ref(db), updates);
      console.log(`üéØ Ho√†n th√†nh ƒë√°nh s·ªë l·∫°i l√¥ h√†ng:`);
      console.log(`   - ${totalReordered} l√¥ ƒë√£ ƒë∆∞·ª£c ƒë√°nh s·ªë l·∫°i`);
      console.log(`   - ${totalDeleted} s·∫£n ph·∫©m h·∫øt h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a`);
    } else {
      console.log('‚ú® Kh√¥ng c·∫ßn thay ƒë·ªïi g√¨, t·∫•t c·∫£ l√¥ h√†ng ƒë√£ ƒë√∫ng th·ª© t·ª±');
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói khi ƒë√°nh s·ªë l·∫°i l√¥ h√†ng:', error);
    throw error;
  }
}

/**
 * Normalize thu·ªôc t√≠nh s·∫£n ph·∫©m ƒë·ªÉ so s√°nh
 */
function normalizeAttribute(attr: string | undefined): string {
  return (attr || '').trim().toLowerCase();
}

/**
 * Ki·ªÉm tra hai s·∫£n ph·∫©m c√≥ c√πng thu·ªôc t√≠nh kh√¥ng
 */
export function isSameProductGroup(product1: Product, product2: Product): boolean {
  return (
    normalizeAttribute(product1.name) === normalizeAttribute(product2.name) &&
    normalizeAttribute(product1.color) === normalizeAttribute(product2.color) &&
    normalizeAttribute(product1.quality) === normalizeAttribute(product2.quality) &&
    normalizeAttribute(product1.size) === normalizeAttribute(product2.size) &&
    normalizeAttribute(product1.unit) === normalizeAttribute(product2.unit)
  );
}

/**
 * L·∫•y s·ªë l√¥ ti·∫øp theo cho s·∫£n ph·∫©m m·ªõi
 */
export function getNextBatchNumber(newProduct: Product, existingProducts: Product[]): number {
  const sameGroupProducts = existingProducts.filter(p => 
    isSameProductGroup(p, newProduct) && p.quantity > 0
  );
  
  if (sameGroupProducts.length === 0) {
    return 1; // S·∫£n ph·∫©m ƒë·∫ßu ti√™n trong nh√≥m
  }
  
  const maxBatch = Math.max(...sameGroupProducts.map(p => p.batchNumber || 1));
  return maxBatch + 1;
}
